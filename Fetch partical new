from datetime import datetime, timedelta
from airflow import DAG
from airflow.operators.python_operator import PythonOperator
from airflow.hooks.postgres_hook import PostgresHook
from airflow.utils.log.logging_mixin import LoggingMixin

# Define default_args for the DAG
default_args = {
    'owner': 'airflow',
    'start_date': datetime(2023, 1, 1),
    'depends_on_past': False,
    'retries': 1,
    'retry_delay': timedelta(minutes=5)
}

# Define the DAG
dag = DAG(
    'fetch_and_store_logs',
    default_args=default_args,
    schedule_interval=timedelta(hours=1),  # Set the schedule interval as needed
)

# Define the Python function to fetch and store logs
def fetch_and_store_logs(**kwargs):
    # Create a PostgresHook to connect to PostgreSQL
    pg_hook = PostgresHook(postgres_conn_id='my_postgres_conn')  # Update with your own connection ID

    # Fetch logs from the Airflow logs using the LoggingMixin
    logs = LoggingMixin().log_reader.read_logs()

    # Iterate through the logs
    for log in logs:
        log_message = log.msg.strip()
        dag_id = kwargs['dag'].dag_id

        # Check if the log message contains '[' character
        if '[' in log_message:
            # Insert the log message and DAG ID into the PostgreSQL table
            sql = "INSERT INTO my_logs_table (log_message, dag_id) VALUES (%s, %s);"
            pg_hook.run(sql, parameters=(log_message, dag_id))

# Define the PythonOperator to execute the fetch_and_store_logs function
fetch_logs_task = PythonOperator(
    task_id='fetch_logs_task',
    python_callable=fetch_and_store_logs,
    provide_context=True,  # Pass the context to the Python function
    dag=dag
)

# Set the task dependencies
fetch_logs_task
